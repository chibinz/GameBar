pub fn disassemble(opcode: u16) -> u8
{
    /*
        Thumb Binary Opcode Format
        |_15|_14|_13|_12|_11|_10|_9_|_8_|_7_|_6_|_5_|_4_|_3_|_2_|_1_|_0_|
        |_0___0___0___0___0_|_______Offset______|____Rs_____|____Rd_____|LSL
        |_0___0___0___0___1_|_______Offset______|____Rs_____|____Rd_____|LSR
        |_0___0___0___1___0_|_______Offset______|____Rs_____|____Rd_____|ASR
        |_0___0___0___1___1_|_I,_Op_|___Rn/nn___|____Rs_____|____Rd_____|ADD/SUB
        |_0___0___1___0___0_|____Rd_____|_____________Offset____________|MOV
        |_0___0___1___0___1_|____Rd_____|_____________Offset____________|CMP
        |_0___0___1___1___0_|____Rd_____|_____________Offset____________|ADD
        |_0___0___1___1___1_|____Rd_____|_____________Offset____________|SUB
        |_0___1___0___0___0___0_|______Op_______|____Rs_____|____Rd_____|AluOp
        |_0___1___0___0___0___1_|__Op___|Hd_|Hs_|____Rs_____|____Rd_____|HiReg/BX
        |_0___1___0___0___1_|____Rd_____|_____________Word______________|LDR PC
        |_0___1___0___1___0_|_B_|_0_|___Ro______|____Rb_____|____Rd_____|STR/STRB
        |_0___1___0___1___0___0___1_|___Ro______|____Rb_____|____Rd_____|STRH
        |_0___1___0___1___0___1___1_|___Ro______|____Rb_____|____Rd_____|LDSB
        |_0___1___0___1___1_|_B_|_0_|___Ro______|____Rb_____|____Rd_____|LDR/LDRB
        |_0___1___0___1___1___0___1_|___Ro______|____Rb_____|____Rd_____|LDRH
        |_0___1___0___1___1___1___1_|___Ro______|____Rb_____|____Rd_____|LDSH
        |_0___1___1___0___0_|_______Offset______|____Rb_____|____Rd_____|STR imm
        |_0___1___1___0___1_|_______Offset______|____Rb_____|____Rd_____|STRB imm
        |_0___1___1___1___0_|_______Offset______|____Rb_____|____Rd_____|LDR imm
        |_0___1___1___1___1_|_______Offset______|____Rb_____|____Rd_____|LDRB imm
        |_1___0___0___0___0_|_______Offset______|____Rb_____|____Rd_____|STRH imm
        |_1___0___0___0___1_|_______Offset______|____Rb_____|____Rd_____|LDRH imm
        |_1___0___0___1___0_|____Rd_____|_____________Word______________|STR SP
        |_1___0___0___1___1_|____Rd_____|_____________Word______________|LDR SP
        |_1___0___1___0___0_|____Rd_____|_____________Word______________|ADD PC
        |_1___0___1___0___1_|____Rd_____|_____________Word______________|ADD SP
        |_1___0___1___1___0___0___0___0_|_S_|___________Word____________|ADD SP,nn
        |_1___0___1___1___0___1___0_|_R_|____________Rlist______________|PUSH
        |_1___0___1___1___1___1___0_|_R_|____________Rlist______________|POP
        |_1___1___0___0___0_|____Rb_____|____________Rlist______________|STMIA
        |_1___1___0___0___1_|____Rb_____|____________Rlist______________|LBMIA
        |_1___1___0___1___0_|___Cond____|_________Signed_Offset_________|BEQ-BVC
        |_1___1___0___1___1_|___Cond____|_________Signed_Offset_________|BHI-BLE
        |_1___1___0___1___1___1___1___1_|___________User_Data___________|SWI
        |_1___1___1___0___0_|________________Offset_____________________|B
        |_1___1___1___1___0_|______________Offset_Low/High______________|BL-0
        |_1___1___1___1___1_|______________Offset_Low/High______________|BL-1
    */ 

    // decode the instructions using higher 5 bits

    let h5: u8 = (opcode >> 11) as u8;
    match h5
    {
        0b00000 => print!("LSL"),
        0b00001 => print!("LSR"),
        0b00010 => print!("ASR"),
        0b00011 => print!("ADD/SUB"),
        0b00100 => print!("MOV"),
        0b00101 => print!("CMP"),
        0b00110 => print!("ADD"),
        0b00111 => print!("SUB"),
        0b01000 => print!("AluOp/HiReg/BX"),
        0b01001 => print!("LDR PC"),
        0b01010 => print!("STR/STRB/STRH/LDSB"),
        0b01011 => print!("LDR/LDRB/LDRH/LDSH"),
        0b01100 => print!("STR imm"),
        0b01101 => print!("STRB imm"),
        0b01110 => print!("LDR imm"),
        0b01111 => print!("LDRB imm"),
        0b10000 => print!("STRH imm"),
        0b10001 => print!("LDRH imm"),
        0b10010 => print!("STR SP"),
        0b10011 => print!("LDR SP"),
        0b10100 => print!("ADD Rd, PC"),
        0b10101 => print!("ADD Rd, SP"),
        0b10110 => print!("ADD SP imm/PUSH"),
        0b10111 => print!("POP"),
        0b11000 => print!("STMIA"),
        0b11001 => print!("LBMIA"),
        0b11010 => print!("BEQ-BVC"),
        0b11011 => print!("BHI-BLE/SWI"),
        0b11100 => print!("B"),
        0b11110 => print!("BL-0"),
        0b11111 => print!("BL-1"),
        _0      => print!("invalid opcode!"),
    }

    let bxmask: u16  = 0b0100011100000000;
    let cribit: u16  = 0b1111111100000000;
    let h2mask: u16  = 0b0000000001000000;
    let rsmask: u16  = 0b0000000000111000;
    let rdmask: u16  = 0b0000000000000111;

    if opcode & cribit == bxmask
    {
        let h2 = (opcode & h2mask) >> 6;
        // print!("BX R{}", ((opcode & rsmask) >> 3) << h2);
        return opcode as u8 & 1;
    }

    return 1;
}

